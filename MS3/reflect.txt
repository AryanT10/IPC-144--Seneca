/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3
Full Name  : ARYAN TUWAR
Student ID#: 112137229
Email      : atuwar@myseneca.ca
Section    : ZCC

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1. This code provided from milestone 2 which is a continuation of a whole larger program, likely for managing patient records. The functions included in this snippet seem to be responsible for displaying, searching, adding, editing, and removing patient records from an array of patients.The displayAllPatients() function iterates through the array of patients and displays their data, based on a specified format. It also checks if any eligible records were found and displays an error message if none were found.The searchPatientData() function presents a menu to the user for searching patient records based on their patient number or phone number. It then calls the corresponding search function based on the user's selection.The addPatient() function checks if there is room in the patient array and adds a new patient record if there is space. It also calls the inputPatient() function to gather the necessary patient data.The editPatient() function prompts the user to enter a patient number and then calls the findPatientIndexByPatientNum() function to locate the corresponding patient in the array. It then calls the menuPatientEdit() function to modify the patient's data.The removePatient() function prompts the user to enter a patient number and checks if the patient record exists. If the record exists, it displays the patient's information and prompts the user to confirm the deletion. If confirmed, it sets the patient number to 0 to mark the record as empty.

Overall, these functions provide basic functionality for managing patient records in an array. However, without seeing the rest of the program or understanding the context in which these functions are used, it's difficult to provide a more detailed evaluation.

2.Milestone #3 mandatory functions... // Then thi code follows with milestone 3 which is for a clinic management system that allows users to view appointment schedules and add new appointments. The code is written in C and contains three functions: viewAllAppointments, viewAppointmentSchedule, and addAppointment.The viewAllAppointments function displays all appointments sorted by time. It first sorts the appointments array by time using the sort function. It then iterates through the appointments array and for each appointment, it finds and displays the corresponding patient data using the displayScheduleData function.The viewAppointmentSchedule function allows the user to view the appointment schedule for a particular date. It first prompts the user to input the year, month, and day of the desired date. It then sorts the appointments array by time using the sort function. It iterates through the appointments array and for each appointment, it checks if the appointment date matches the user-input date. If it does, it finds and displays the corresponding patient data using the displayScheduleData function.The addAppointment function allows the user to add a new appointment. It prompts the user to input the patient number and then checks if the patient exists in the patient array. It then prompts the user to input the appointment date and time. It checks if the time slot is available and if it is not, it prompts the user to input a different time. If the time slot is available, it assigns the appointment to the next available slot in the appointments array.

Overall, these functions provide basic functionality for managing appointments in a clinic. However, there are some limitations to the code, such as the lack of error checking and input validation.

3.UTILITY FUNCTION // The function searchPatientByPatientNumber allows the user to search for a patient record by their patient number. The function first prompts the user to enter the patient number and then checks if it exists in the patient array using the findPatientIndexByPatientNum function. If the patient number exists, the function displays the patient's name, patient number, and phone number. If the patient number does not exist, the function displays an error message.The function searchPatientByPhoneNumber allows the user to search for a patient record by their phone number. The function first prompts the user to enter the phone number and then searches for a match in the patient array using a for loop and the strcmp function. If a match is found, the function displays a table with the patient's name, patient number, and phone number. If no match is found, the function displays an error message.The function nextPatientNumber finds the next available patient number in the patient array. It first initializes a variable maximumNum to 0 and then loops through the patient array to find the highest patient number. It then returns the next available patient number by adding 1 to the highest patient number found.The function findPatientIndexByPatientNum finds the index of a patient in the patient array by their patient number. It uses a for loop to iterate through the patient array and checks if the patient number matches the one entered by the user. If a match is found, the function returns the index of the patient in the patient array. If no match is found, the function returns -1.The remaining functions are related to managing appointments. The timeSlotAvailable function checks if a time slot is available for a given date and time by looping through the app array and comparing the date and time of the appointment to the given date and time. If a match is found, the function returns 1, indicating that the time slot is not available.The nextSlotAvailable function finds the next available time slot in the app array by looping through the array and checking if the patientNumber is less than 1, indicating an available time slot. The function returns the index of the next available time slot.The validAppointment function checks if an appointment is valid by looping through the app array and comparing the patient number and date of the appointment to the given patient number and date. If a match is found, the function returns the index of the appointment in the app array. If no match is found, the function returns -1.

Overall, these functions provide essential functionality for managing patient records and appointments. They demonstrate the use of loops, conditional statements, and functions to efficiently search and manage data in an array.

4.USER INPUT // The inputPhoneData function is designed to take user input for phone contact information. It is correctly designed and working as expected.The inputPatient function takes input for a patient's data, and it appears to have some issues. There is an if statement to check the length of the patient's name, but the message is misleading. The error message says that the string length should be no more than 15 characters, but the length check is missing. The error message should say that the string length should be no more than 14 characters because the array size is 15, and one character is reserved for the null terminator.The importPatients function is designed to import patient data from a file into an array of patients. The function uses fscanf to read data from the file, but it does not check for the return value of fscanf. It is recommended to check the return value of fscanf to ensure that the expected data was read correctly. Also, the function should handle the case when the number of records read is less than the maximum size of the array.The importAppointments function is designed to import appointment data from a file into an array of appointments. The function uses a for loop to iterate over the appointments, but it also uses the feof function to check for the end of file. It is not recommended to use feof to control the loop because it can lead to unexpected behavior. Instead, the loop condition should check the return value of fscanf to determine if the end of file was reached. Additionally, the function should handle the case when the number of records read is less than the maximum size of the array.

Overall, the code needs some improvements in terms of error checking, input validation, and handling of unexpected inputs.